/*
 * This file is generated by jOOQ.
 */
package com.steeplesoft.simplesec.app.model.jooq.tables;


import com.steeplesoft.simplesec.app.model.jooq.Keys;
import com.steeplesoft.simplesec.app.model.jooq.Public;
import com.steeplesoft.simplesec.app.model.jooq.tables.records.JwtMetadataRecord;

import jakarta.annotation.Nonnull;
import jakarta.annotation.Nullable;

import java.util.function.Function;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function4;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.18.6"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class JwtMetadata extends TableImpl<JwtMetadataRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.jwt_metadata</code>
     */
    public static final JwtMetadata JWT_METADATA = new JwtMetadata();

    /**
     * The class holding records for this type
     */
    @Override
    @Nonnull
    public Class<JwtMetadataRecord> getRecordType() {
        return JwtMetadataRecord.class;
    }

    /**
     * The column <code>public.jwt_metadata.id</code>.
     */
    public final TableField<JwtMetadataRecord, String> ID = createField(DSL.name("id"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.jwt_metadata.user_name</code>.
     */
    public final TableField<JwtMetadataRecord, String> USER_NAME = createField(DSL.name("user_name"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.jwt_metadata.expiry_date</code>.
     */
    public final TableField<JwtMetadataRecord, Long> EXPIRY_DATE = createField(DSL.name("expiry_date"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.jwt_metadata.revoked</code>.
     */
    public final TableField<JwtMetadataRecord, Boolean> REVOKED = createField(DSL.name("revoked"), SQLDataType.BOOLEAN.defaultValue(DSL.field(DSL.raw("false"), SQLDataType.BOOLEAN)), this, "");

    private JwtMetadata(Name alias, Table<JwtMetadataRecord> aliased) {
        this(alias, aliased, null);
    }

    private JwtMetadata(Name alias, Table<JwtMetadataRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.jwt_metadata</code> table reference
     */
    public JwtMetadata(String alias) {
        this(DSL.name(alias), JWT_METADATA);
    }

    /**
     * Create an aliased <code>public.jwt_metadata</code> table reference
     */
    public JwtMetadata(Name alias) {
        this(alias, JWT_METADATA);
    }

    /**
     * Create a <code>public.jwt_metadata</code> table reference
     */
    public JwtMetadata() {
        this(DSL.name("jwt_metadata"), null);
    }

    public <O extends Record> JwtMetadata(Table<O> child, ForeignKey<O, JwtMetadataRecord> key) {
        super(child, key, JWT_METADATA);
    }

    @Override
    @Nullable
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    @Nonnull
    public UniqueKey<JwtMetadataRecord> getPrimaryKey() {
        return Keys.JWT_METADATA_PKEY;
    }

    @Override
    @Nonnull
    public JwtMetadata as(String alias) {
        return new JwtMetadata(DSL.name(alias), this);
    }

    @Override
    @Nonnull
    public JwtMetadata as(Name alias) {
        return new JwtMetadata(alias, this);
    }

    @Override
    @Nonnull
    public JwtMetadata as(Table<?> alias) {
        return new JwtMetadata(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    @Nonnull
    public JwtMetadata rename(String name) {
        return new JwtMetadata(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    @Nonnull
    public JwtMetadata rename(Name name) {
        return new JwtMetadata(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    @Nonnull
    public JwtMetadata rename(Table<?> name) {
        return new JwtMetadata(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    @Nonnull
    public Row4<String, String, Long, Boolean> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function4<? super String, ? super String, ? super Long, ? super Boolean, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function4<? super String, ? super String, ? super Long, ? super Boolean, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
