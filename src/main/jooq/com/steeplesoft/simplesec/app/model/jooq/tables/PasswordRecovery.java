/*
 * This file is generated by jOOQ.
 */
package com.steeplesoft.simplesec.app.model.jooq.tables;


import com.steeplesoft.simplesec.app.model.jooq.Keys;
import com.steeplesoft.simplesec.app.model.jooq.Public;
import com.steeplesoft.simplesec.app.model.jooq.tables.records.PasswordRecoveryRecord;

import jakarta.annotation.Nonnull;
import jakarta.annotation.Nullable;

import java.util.function.Function;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function4;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.18.6"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PasswordRecovery extends TableImpl<PasswordRecoveryRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.password_recovery</code>
     */
    public static final PasswordRecovery PASSWORD_RECOVERY = new PasswordRecovery();

    /**
     * The class holding records for this type
     */
    @Override
    @Nonnull
    public Class<PasswordRecoveryRecord> getRecordType() {
        return PasswordRecoveryRecord.class;
    }

    /**
     * The column <code>public.password_recovery.id</code>.
     */
    public final TableField<PasswordRecoveryRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.password_recovery.user_name</code>.
     */
    public final TableField<PasswordRecoveryRecord, String> USER_NAME = createField(DSL.name("user_name"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.password_recovery.recovery_token</code>.
     */
    public final TableField<PasswordRecoveryRecord, String> RECOVERY_TOKEN = createField(DSL.name("recovery_token"), SQLDataType.VARCHAR(6), this, "");

    /**
     * The column <code>public.password_recovery.expiry_date</code>.
     */
    public final TableField<PasswordRecoveryRecord, Long> EXPIRY_DATE = createField(DSL.name("expiry_date"), SQLDataType.BIGINT, this, "");

    private PasswordRecovery(Name alias, Table<PasswordRecoveryRecord> aliased) {
        this(alias, aliased, null);
    }

    private PasswordRecovery(Name alias, Table<PasswordRecoveryRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.password_recovery</code> table reference
     */
    public PasswordRecovery(String alias) {
        this(DSL.name(alias), PASSWORD_RECOVERY);
    }

    /**
     * Create an aliased <code>public.password_recovery</code> table reference
     */
    public PasswordRecovery(Name alias) {
        this(alias, PASSWORD_RECOVERY);
    }

    /**
     * Create a <code>public.password_recovery</code> table reference
     */
    public PasswordRecovery() {
        this(DSL.name("password_recovery"), null);
    }

    public <O extends Record> PasswordRecovery(Table<O> child, ForeignKey<O, PasswordRecoveryRecord> key) {
        super(child, key, PASSWORD_RECOVERY);
    }

    @Override
    @Nullable
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    @Nonnull
    public Identity<PasswordRecoveryRecord, Long> getIdentity() {
        return (Identity<PasswordRecoveryRecord, Long>) super.getIdentity();
    }

    @Override
    @Nonnull
    public UniqueKey<PasswordRecoveryRecord> getPrimaryKey() {
        return Keys.PASSWORD_RECOVERY_PKEY;
    }

    @Override
    @Nonnull
    public PasswordRecovery as(String alias) {
        return new PasswordRecovery(DSL.name(alias), this);
    }

    @Override
    @Nonnull
    public PasswordRecovery as(Name alias) {
        return new PasswordRecovery(alias, this);
    }

    @Override
    @Nonnull
    public PasswordRecovery as(Table<?> alias) {
        return new PasswordRecovery(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    @Nonnull
    public PasswordRecovery rename(String name) {
        return new PasswordRecovery(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    @Nonnull
    public PasswordRecovery rename(Name name) {
        return new PasswordRecovery(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    @Nonnull
    public PasswordRecovery rename(Table<?> name) {
        return new PasswordRecovery(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    @Nonnull
    public Row4<Long, String, String, Long> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function4<? super Long, ? super String, ? super String, ? super Long, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function4<? super Long, ? super String, ? super String, ? super Long, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
