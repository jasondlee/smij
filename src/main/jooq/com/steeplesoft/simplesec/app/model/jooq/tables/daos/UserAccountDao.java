/*
 * This file is generated by jOOQ.
 */
package com.steeplesoft.simplesec.app.model.jooq.tables.daos;


import com.steeplesoft.simplesec.app.model.jooq.tables.UserAccount;
import com.steeplesoft.simplesec.app.model.jooq.tables.records.UserAccountRecord;

import jakarta.annotation.Nonnull;
import jakarta.annotation.Nullable;

import java.time.OffsetDateTime;
import java.util.List;
import java.util.Optional;

import javax.annotation.processing.Generated;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.19.11"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class UserAccountDao extends DAOImpl<UserAccountRecord, com.steeplesoft.simplesec.app.model.jooq.tables.pojos.UserAccount, Long> {

    /**
     * Create a new UserAccountDao without any configuration
     */
    public UserAccountDao() {
        super(UserAccount.USER_ACCOUNT, com.steeplesoft.simplesec.app.model.jooq.tables.pojos.UserAccount.class);
    }

    /**
     * Create a new UserAccountDao with an attached configuration
     */
    public UserAccountDao(Configuration configuration) {
        super(UserAccount.USER_ACCOUNT, com.steeplesoft.simplesec.app.model.jooq.tables.pojos.UserAccount.class, configuration);
    }

    @Override
    @Nonnull
    public Long getId(com.steeplesoft.simplesec.app.model.jooq.tables.pojos.UserAccount object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>tenant_id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    @Nonnull
    public List<com.steeplesoft.simplesec.app.model.jooq.tables.pojos.UserAccount> fetchRangeOfTenantId(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(UserAccount.USER_ACCOUNT.TENANT_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>tenant_id IN (values)</code>
     */
    @Nonnull
    public List<com.steeplesoft.simplesec.app.model.jooq.tables.pojos.UserAccount> fetchByTenantId(Long... values) {
        return fetch(UserAccount.USER_ACCOUNT.TENANT_ID, values);
    }

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    @Nonnull
    public List<com.steeplesoft.simplesec.app.model.jooq.tables.pojos.UserAccount> fetchRangeOfId(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(UserAccount.USER_ACCOUNT.ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    @Nonnull
    public List<com.steeplesoft.simplesec.app.model.jooq.tables.pojos.UserAccount> fetchById(Long... values) {
        return fetch(UserAccount.USER_ACCOUNT.ID, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    @Nullable
    public com.steeplesoft.simplesec.app.model.jooq.tables.pojos.UserAccount fetchOneById(Long value) {
        return fetchOne(UserAccount.USER_ACCOUNT.ID, value);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    @Nonnull
    public Optional<com.steeplesoft.simplesec.app.model.jooq.tables.pojos.UserAccount> fetchOptionalById(Long value) {
        return fetchOptional(UserAccount.USER_ACCOUNT.ID, value);
    }

    /**
     * Fetch records that have <code>user_name BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    @Nonnull
    public List<com.steeplesoft.simplesec.app.model.jooq.tables.pojos.UserAccount> fetchRangeOfUserName(String lowerInclusive, String upperInclusive) {
        return fetchRange(UserAccount.USER_ACCOUNT.USER_NAME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>user_name IN (values)</code>
     */
    @Nonnull
    public List<com.steeplesoft.simplesec.app.model.jooq.tables.pojos.UserAccount> fetchByUserName(String... values) {
        return fetch(UserAccount.USER_ACCOUNT.USER_NAME, values);
    }

    /**
     * Fetch a unique record that has <code>user_name = value</code>
     */
    @Nullable
    public com.steeplesoft.simplesec.app.model.jooq.tables.pojos.UserAccount fetchOneByUserName(String value) {
        return fetchOne(UserAccount.USER_ACCOUNT.USER_NAME, value);
    }

    /**
     * Fetch a unique record that has <code>user_name = value</code>
     */
    @Nonnull
    public Optional<com.steeplesoft.simplesec.app.model.jooq.tables.pojos.UserAccount> fetchOptionalByUserName(String value) {
        return fetchOptional(UserAccount.USER_ACCOUNT.USER_NAME, value);
    }

    /**
     * Fetch records that have <code>password BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    @Nonnull
    public List<com.steeplesoft.simplesec.app.model.jooq.tables.pojos.UserAccount> fetchRangeOfPassword(String lowerInclusive, String upperInclusive) {
        return fetchRange(UserAccount.USER_ACCOUNT.PASSWORD, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>password IN (values)</code>
     */
    @Nonnull
    public List<com.steeplesoft.simplesec.app.model.jooq.tables.pojos.UserAccount> fetchByPassword(String... values) {
        return fetch(UserAccount.USER_ACCOUNT.PASSWORD, values);
    }

    /**
     * Fetch records that have <code>phone_number BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    @Nonnull
    public List<com.steeplesoft.simplesec.app.model.jooq.tables.pojos.UserAccount> fetchRangeOfPhoneNumber(String lowerInclusive, String upperInclusive) {
        return fetchRange(UserAccount.USER_ACCOUNT.PHONE_NUMBER, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>phone_number IN (values)</code>
     */
    @Nonnull
    public List<com.steeplesoft.simplesec.app.model.jooq.tables.pojos.UserAccount> fetchByPhoneNumber(String... values) {
        return fetch(UserAccount.USER_ACCOUNT.PHONE_NUMBER, values);
    }

    /**
     * Fetch records that have <code>address1 BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    @Nonnull
    public List<com.steeplesoft.simplesec.app.model.jooq.tables.pojos.UserAccount> fetchRangeOfAddress1(String lowerInclusive, String upperInclusive) {
        return fetchRange(UserAccount.USER_ACCOUNT.ADDRESS1, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>address1 IN (values)</code>
     */
    @Nonnull
    public List<com.steeplesoft.simplesec.app.model.jooq.tables.pojos.UserAccount> fetchByAddress1(String... values) {
        return fetch(UserAccount.USER_ACCOUNT.ADDRESS1, values);
    }

    /**
     * Fetch records that have <code>address2 BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    @Nonnull
    public List<com.steeplesoft.simplesec.app.model.jooq.tables.pojos.UserAccount> fetchRangeOfAddress2(String lowerInclusive, String upperInclusive) {
        return fetchRange(UserAccount.USER_ACCOUNT.ADDRESS2, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>address2 IN (values)</code>
     */
    @Nonnull
    public List<com.steeplesoft.simplesec.app.model.jooq.tables.pojos.UserAccount> fetchByAddress2(String... values) {
        return fetch(UserAccount.USER_ACCOUNT.ADDRESS2, values);
    }

    /**
     * Fetch records that have <code>city BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    @Nonnull
    public List<com.steeplesoft.simplesec.app.model.jooq.tables.pojos.UserAccount> fetchRangeOfCity(String lowerInclusive, String upperInclusive) {
        return fetchRange(UserAccount.USER_ACCOUNT.CITY, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>city IN (values)</code>
     */
    @Nonnull
    public List<com.steeplesoft.simplesec.app.model.jooq.tables.pojos.UserAccount> fetchByCity(String... values) {
        return fetch(UserAccount.USER_ACCOUNT.CITY, values);
    }

    /**
     * Fetch records that have <code>state BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    @Nonnull
    public List<com.steeplesoft.simplesec.app.model.jooq.tables.pojos.UserAccount> fetchRangeOfState(String lowerInclusive, String upperInclusive) {
        return fetchRange(UserAccount.USER_ACCOUNT.STATE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>state IN (values)</code>
     */
    @Nonnull
    public List<com.steeplesoft.simplesec.app.model.jooq.tables.pojos.UserAccount> fetchByState(String... values) {
        return fetch(UserAccount.USER_ACCOUNT.STATE, values);
    }

    /**
     * Fetch records that have <code>zip_code BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    @Nonnull
    public List<com.steeplesoft.simplesec.app.model.jooq.tables.pojos.UserAccount> fetchRangeOfZipCode(String lowerInclusive, String upperInclusive) {
        return fetchRange(UserAccount.USER_ACCOUNT.ZIP_CODE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>zip_code IN (values)</code>
     */
    @Nonnull
    public List<com.steeplesoft.simplesec.app.model.jooq.tables.pojos.UserAccount> fetchByZipCode(String... values) {
        return fetch(UserAccount.USER_ACCOUNT.ZIP_CODE, values);
    }

    /**
     * Fetch records that have <code>roles BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    @Nonnull
    public List<com.steeplesoft.simplesec.app.model.jooq.tables.pojos.UserAccount> fetchRangeOfRoles(String lowerInclusive, String upperInclusive) {
        return fetchRange(UserAccount.USER_ACCOUNT.ROLES, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>roles IN (values)</code>
     */
    @Nonnull
    public List<com.steeplesoft.simplesec.app.model.jooq.tables.pojos.UserAccount> fetchByRoles(String... values) {
        return fetch(UserAccount.USER_ACCOUNT.ROLES, values);
    }

    /**
     * Fetch records that have <code>creation_date BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    @Nonnull
    public List<com.steeplesoft.simplesec.app.model.jooq.tables.pojos.UserAccount> fetchRangeOfCreationDate(OffsetDateTime lowerInclusive, OffsetDateTime upperInclusive) {
        return fetchRange(UserAccount.USER_ACCOUNT.CREATION_DATE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>creation_date IN (values)</code>
     */
    @Nonnull
    public List<com.steeplesoft.simplesec.app.model.jooq.tables.pojos.UserAccount> fetchByCreationDate(OffsetDateTime... values) {
        return fetch(UserAccount.USER_ACCOUNT.CREATION_DATE, values);
    }

    /**
     * Fetch records that have <code>fail_attempts BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    @Nonnull
    public List<com.steeplesoft.simplesec.app.model.jooq.tables.pojos.UserAccount> fetchRangeOfFailAttempts(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(UserAccount.USER_ACCOUNT.FAIL_ATTEMPTS, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>fail_attempts IN (values)</code>
     */
    @Nonnull
    public List<com.steeplesoft.simplesec.app.model.jooq.tables.pojos.UserAccount> fetchByFailAttempts(Integer... values) {
        return fetch(UserAccount.USER_ACCOUNT.FAIL_ATTEMPTS, values);
    }

    /**
     * Fetch records that have <code>locked_until BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    @Nonnull
    public List<com.steeplesoft.simplesec.app.model.jooq.tables.pojos.UserAccount> fetchRangeOfLockedUntil(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(UserAccount.USER_ACCOUNT.LOCKED_UNTIL, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>locked_until IN (values)</code>
     */
    @Nonnull
    public List<com.steeplesoft.simplesec.app.model.jooq.tables.pojos.UserAccount> fetchByLockedUntil(Long... values) {
        return fetch(UserAccount.USER_ACCOUNT.LOCKED_UNTIL, values);
    }
}
